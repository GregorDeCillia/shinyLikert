scales=list(y=list(relation="free")), layout=c(1,2))
NZScienceTeachingLong <- reshape2::melt(NZScienceTeaching,
id.vars=c("Question", "Subtable"))
names(NZScienceTeachingLong)[3] <- "Agreement"
head(NZScienceTeachingLong)
likert(Question ~ Agreement | Subtable, value="value", data=NZScienceTeachingLong,
ylab=NULL,
scales=list(y=list(relation="free")), layout=c(1,2))
## End(Not run)
tmp3 <- array(1:24, dim=c(2,3,4),
dimnames=list(A=letters[1:2], B=LETTERS[3:5], C=letters[6:9]))
## positive.order=FALSE is the default.  With arrays
## the rownames within each item of an array are identical.
## likert(tmp3)
likert(tmp3, layout=c(1,4))
likert(tmp3, layout=c(2,2), resize.height=c(2,1), resize.width=c(3,4))
Responses" title="http://survey.cvent.com/blog/customer-insights-2/box-scores-are-not-just-for-baseball<br />
Responses">http://survey.cvent.com/blog/customer-insights-2/box-scores-are-not-just...</a> <- c(15, 13, 12, 25, 35)
names(Responses) <- c("Strongly Disagree", "Disagree", "No Opinion",
"Agree", "Strongly Agree")
likert(AudiencePercent,
auto.key=list(between=1, between.columns=2),
xlab=paste("Percentage of audience younger than 35 (left of zero)",
"and older than 35 (right of zero)"),
main="Target Audience",
col=rev(sequential_hcl(4)),
sub="This plot looks better in a 7in x 3.5in window.")
data(USAge.table)
USA79 <- USAge.table[75:1, 2:1, "1979"]/1000000
PL <- likert(USA79,
main="Population of United States 1979 (ages 0-74)",
xlab="Count in Millions",
ylab="Age",
scales=list(
y=list(
limits=c(0,77),
at=seq(1,76,5),
labels=seq(0,75,5),
tck=.5))
)
PL
as.pyramidLikert(PL)
likert(USAge.table[75:1, 2:1, c("1939","1959","1979")]/1000000,
main="Population of United States 1939,1959,1979 (ages 0-74)",
sub="Look for the Baby Boom",
xlab="Count in Millions",
ylab="Age",
scales=list(
y=list(
limits=c(0,77),
at=seq(1,76,5),
labels=seq(0,75,5),
tck=.5)),
strip.left=FALSE, strip=TRUE,
layout=c(3,1), between=list(x=.5))
## End(Not run)
Pop <- rbind(a=c(3,2,4,9), b=c(6,10,12,10))
dimnames(Pop)[[2]] <- c("Very Low", "Low", "High", "Very High")
likert(as.listOfNamedMatrices(Pop),
as.percent=TRUE,
resize.height="rowSums",
strip=FALSE,
strip.left=FALSE,
main=paste("Area and Height are proportional to 'Row Count Totals'.",
"Width is exactly 100%.", sep="\n"))
likert(Question ~ . | Subtable, ProfChal,
positive.order=TRUE,
main="This works, but needs more specified arguments to look good")
likert(Question ~ . | Subtable, ProfChal,
scales=list(y=list(relation="free")), layout=c(1,6),
positive.order=TRUE,
between=list(y=0),
strip=FALSE, strip.left=strip.custom(bg="gray97"),
par.strip.text=list(cex=.6, lines=5),
main="Is your job professionally challenging?",
ylab=NULL,
sub="This looks better in a 10inx7in window")
ProfChalCountsPlot <-
likert(Question ~ . | Subtable, ProfChal,
scales=list(y=list(relation="free")), layout=c(1,6),
positive.order=TRUE,
box.width=unit(.4,"cm"),
between=list(y=0),
strip=FALSE, strip.left=strip.custom(bg="gray97"),
par.strip.text=list(cex=.6, lines=5),
main="Is your job professionally challenging?",
rightAxis=TRUE,  ## display Row Count Totals
ylab=NULL,
sub="This looks better in a 10inx7in window")
ProfChalCountsPlot
ProfChalPctPlot <-
likert(Question ~ . | Subtable, ProfChal,
as.percent=TRUE,    ## implies display Row Count Totals
scales=list(y=list(relation="free")), layout=c(1,6),
positive.order=TRUE,
box.width=unit(.4,"cm"),
between=list(y=0),
strip=FALSE, strip.left=strip.custom(bg="gray97"),
par.strip.text=list(cex=.6, lines=5),
main="Is your job professionally challenging?",
rightAxis=TRUE,  ## display Row Count Totals
ylab=NULL,
sub="This looks better in a 10inx7in window")
ProfChalPctPlot
LikertPercentCountColumns(Question ~ . | Subtable, ProfChal,
layout=c(1,6), scales=list(y=list(relation="free")),
ylab=NULL, between=list(y=0),
strip.left=strip.custom(bg="gray97"), strip=FALSE,
par.strip.text=list(cex=.7),
positive.order=TRUE,
main="Is your job professionally challenging?")
tmph <-
likert(Question ~ . , ProfChal[ProfChal$Subtable=="Employment sector",],
as.percent=TRUE,
main='Is your job professionally challenging?',
ylab=NULL,
sub="This plot looks better in a 9in x 4in window.")
tmph$x.scales$labels
names(tmph$x.scales$labels) <- tmph$x.scales$labels
update(tmph, scales=list(x=list(alternating=2)), xlab=NULL, xlab.top="Percent")
tmpv <-
likert(Question ~ . , ProfChal[ProfChal$Subtable=="Employment sector",],
as.percent=TRUE,
main='Is your job professionally challenging?',
sub="likert plots with long Question names look better horizontally.
With effort they can be made to look adequate vertically.",
horizontal=FALSE,
scales=list(y=list(alternating=2), x=list(rot=c(90, 0))),
ylab.right="Percent",
ylab=NULL,
xlab.top="Column Count Totals",
par.settings=list(
layout.heights=list(key.axis.padding=5),
layout.widths=list(key.right=1.5, right.padding=0))
)
tmpv$y.scales$labels
names(tmpv$y.scales$labels) <- tmpv$y.scales$labels
tmpv
tmpv$x.limits <- abbreviate(tmpv$x.limits,8)
tmpv$x.scales$rot=c(0, 0)
tmpv
likert(USAge.table[75:1, 2:1, c("1939","1959","1979")]/1000000,
main="Population of United States 1939,1959,1979 (ages 0-74)",
sub="Look for the Baby Boom",
xlab="Count in Millions",
ylab="Age",
scales=list(
y=list(
limits=c(0,77),
at=seq(1,76,5),
labels=seq(0,75,5),
tck=.5)),
strip.left=FALSE, strip=TRUE,
layout=c(3,1), between=list(x=.5))
USAge.table[75:1, 2:1, c("1939","1959","1979")]/1000000
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
?factors
cartell_data
plot( cartell_data )
data(pisaitems)
require(likert)
install.packages(likert)
install.packages("likert")
require(likert)
data("pisaitems")
head(pisaitems)
View(pisaitems)
items28 <- pisaitems[, substr(names(pisaitems), 1, 5) == "ST24Q"]
head(items28)
items28 <- rename(items28, c(ST24Q01 = "I read only if I have to.", ST24Q02 = "Reading is one of my favorite hobbies.",
ST24Q03 = "I like talking about books with other people.", ST24Q04 = "I find it hard to finish books.", ST24Q05 = "I feel happy if I receive a book as a present.",
ST24Q06 = "For me, reading is a waste of time.", ST24Q07 = "I enjoy going to a bookstore or a library.", ST24Q08 = "I read only to get information that I need.",
ST24Q09 = "I cannot sit still and read for more than a few minutes.", ST24Q10 = "I like to express my opinions about books I have read.",
ST24Q11 = "I like to exchange books with my friends"))
??rename
require(dplyr)
items28 <- rename(items28, c(ST24Q01 = "I read only if I have to.", ST24Q02 = "Reading is one of my favorite hobbies.",
ST24Q03 = "I like talking about books with other people.", ST24Q04 = "I find it hard to finish books.", ST24Q05 = "I feel happy if I receive a book as a present.",
ST24Q06 = "For me, reading is a waste of time.", ST24Q07 = "I enjoy going to a bookstore or a library.", ST24Q08 = "I read only to get information that I need.",
ST24Q09 = "I cannot sit still and read for more than a few minutes.", ST24Q10 = "I like to express my opinions about books I have read.",
ST24Q11 = "I like to exchange books with my friends"))
ls("package:likert")
require(devtools)
install_github('likert', 'jbryer')
require(likert)
ls("package:likert")
require(devtools)
install_github('likert')
getOption("github.user")
devtools::install_github("hadley/bigrquery")
install.packages(jsonlite)
devtools::install_github("jsonlite")
devtools::install_github("hadley/bigrquery")
devtools::install_github("hadley/bigrquery")
install.packages(digest)
install.packages("digest")
devtools::install_github("hadley/bigrquery")
install.packages("curl")
devtools::install_github("hadley/bigrquery")
devtools::install_github("hadley/bigrquery")
install.packages("Rcpp")
devtools::install_github("hadley/bigrquery")
install.packages("stringi")
devtools::install_github("hadley/bigrquery")
install_github('likert', 'jbryer')
devtools::install_github('likert', 'jbryer')
devtools::install_github('jbryer/likert')
ls("package:likert")
require(likert)
ls("package:likert")
shinyLikert()
likert::shinyLikert()
install.packages( "C:\Users\grogon\Downloads", repos = NULL, type = "source" )
install.packages( "C://Users/grogon/Downloads", repos = NULL, type = "source" )
install.packages( "C://Users/grogon/Downloads/likert_1.3.3.tar.gz", repos = NULL, type = "source" )
likert::shinyLikert()
remove.packages("likert", lib="~/R/win-library/3.2")
install.packages( "C://Users/grogon/Downloads/likert_1.3.3.tar.gz", repos = NULL, type = "source" )
require(likert)
ls("package:likert")
data(USAge.table)
USA79 <- USAge.table[75:1, 2:1, "1979"]/1000000
PL <- likert(USA79,
main="Population of United States 1979 (ages 0-74)",
xlab="Count in Millions",
ylab="Age",
scales=list(
y=list(
limits=c(0,77),
at=seq(1,76,5),
labels=seq(0,75,5),
tck=.5))
)
PL
as.pyramidLikert(PL)
require(HH)
data(USAge.table)
USA79 <- USAge.table[75:1, 2:1, "1979"]/1000000
PL <- likert(USA79,
main="Population of United States 1979 (ages 0-74)",
xlab="Count in Millions",
ylab="Age",
scales=list(
y=list(
limits=c(0,77),
at=seq(1,76,5),
labels=seq(0,75,5),
tck=.5))
)
PL
as.pyramidLikert(PL)
shinyLikert()
likert::shinyLikert()
?factor
library(shinyLikert)
data = shinyLikert:::createTestData(10,100,"","")
is.ordered( data$likert_data$`Question 1` )
?chisq.test
chisq.test( data$likert_data[1], data$row_factors[1]  )
data$likert_data[1]
data$row_factors[1]
length( data$row_factors[1] )
length( data$likert_data[1] )
chisq.test( data$likert_data[1], data$row_factors[1]  )
factor( data$row_factors[1] )
as.factor( data$row_factors[1] )
data$row_factors[,1]
chisq.test( data$likert_data[,1], data$row_factors[,1]  )
data = shinyLikert:::createTestData(10,100,"","")
data
data = shinyLikert:::createTestData(100,10,"","")
data
chisq.test( data$likert_data[,1], data$row_factors[,1]  )
chisq.test( data$likert_data[,1], data$row_factors[,1], simulate.p.value  )
chisq.test( data$likert_data[,1], data$row_factors[,1], simulate.p.value = TRUE )
chisq.test( data$likert_data[,1], data$row_factors[,2], simulate.p.value = TRUE )
chisq.test( data$likert_data[,1], data$row_factors[,3], simulate.p.value = TRUE )
chisq.test( data$likert_data[,1], data$row_factors[,4], simulate.p.value = TRUE )
chisq.test( data$likert_data[,1], data$row_factors[,1], simulate.p.value = TRUE )
names( data$row_factors[,1])
names( data$row_factors )
chisq.test( data$likert_data[,2], data$row_factors[,1], simulate.p.value  )
chisq.test( data$likert_data[,2], data$row_factors[,1], simulate.p.value = TRUE )
chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )
chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
for ( i in 1:10 )
x[i] = chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
x = 1:10
for ( i in 1:10 )
x[i] = chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
x
plot(x)
data = createTestData(100, 100, "", "" )
chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
data = createTestData(100, 100, "", "" )
chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
x = 1:100
for ( i in 1:100 )
x[i] = chisq.test( data$likert_data[,i], data$row_factors[,1], simulate.p.value = TRUE )$p.value
plot(x)
hist(x)
?createTestData
nquestions = 1000
data = createTestData(100, questions, "", "" )
chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
x = 1:questions
for ( i in 1:questions )
x[i] = chisq.test( data$likert_data[,i], data$row_factors[,1], simulate.p.value = TRUE )$p.value
nquestions = 1000
data = createTestData(100, nquestions, "", "" )
chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
x = 1:nquestions
for ( i in 1:nquestions )
x[i] = chisq.test( data$likert_data[,i], data$row_factors[,1], simulate.p.value = TRUE )$p.value
hist(x)
nquestions = 500
data = createTestData(100, nquestions, "", "" )
chisq.test( data$likert_data[,3], data$row_factors[,1], simulate.p.value = TRUE )$p.value
x = 1:nquestions
for ( i in 1:nquestions )
x[i] = chisq.test( data$likert_data[,i], data$row_factors[,1], simulate.p.value = TRUE )$p.value
# Expect equal distribution
hist( x )
chisq.test( data$likert_data[,3],
data$row_factors[,1],
simulate.p.value = TRUE )
str( chisq.test( data$likert_data[,3],
data$row_factors[,1],
simulate.p.value = TRUE ) )
library(shinyLikert)
renderTestTable = function( dataset, factors, currentFactors()
){
renderTable({
filtered = filterDataSet( data_set,
factors,
currentFactors() )
filtered
})
}
renderTestTable = function( dataset, factors, currentFactors )
){
renderTable({
filtered = filterDataSet( data_set,
factors,
currentFactors() )
filtered
})
}
renderTestTable = function( dataset, factors, currentFactors )
){
renderTable({
filtered = filterDataSet( data_set,
factors,
currentFactors() )
filtered
})
}
renderTestTable = function( dataset, factors, currentFactors )
){
#renderTable({
filtered = filterDataSet( data_set,
factors,
currentFactors() )
filtered
#})
}
renderTestTable = function( dataset, factors, currentFactors )
{
#renderTable({
filtered = filterDataSet( data_set,
factors,
currentFactors() )
filtered
#})
}
tenderTestTable( data, "country", "US" )
renderTestTable( data, "country", "US" )
renderTestTable = function( dataset, factors, currentFactors )
{
#renderTable({
filtered = shinyLikert:::filterDataSet( data_set,
factors,
currentFactors() )
filtered
#})
}
renderTestTable( data, "country", "US" )
renderTestTable = function( dataset, factors, currentFactors )
{
#renderTable({
filtered = shinyLikert:::filterDataSet( dataset,
factors,
currentFactors() )
filtered
#})
}
renderTestTable( data, "country", "US" )
renderTestTable( data, "country", function()"US" )
renderTestTable = function( dataset, factors, currentFactors )
{
renderTable({
filtered = shinyLikert:::filterDataSet( dataset,
factors,
currentFactors() )
filtered$likert_data
})
}
renderTestTable( data, "country", function()"US" )
renderTestTable = function( dataset, factors, currentFactors )
{
#renderTable({
filtered = shinyLikert:::filterDataSet( dataset,
factors,
currentFactors() )
filtered$likert_data
create_table( filtered$likert_data
)
#})
}
renderTestTable( data, "country", function()"US" )
renderTestTable = function( dataset, factors, currentFactors )
{
#renderTable({
filtered = shinyLikert:::filterDataSet( dataset,
factors,
currentFactors() )
filtered$likert_data
shinyLikert:::create_table( filtered$likert_data
)
#})
}
renderTestTable( data, "country", function()"US" )
data = shinyLikert:::createTestData(100,10,"","")
data
renderTestTable( data, "country", function()"US" )
library(shinyLikert)
?create_factorized_table
?shinyLikert:::create_factorized_table
??shinyLikert:::create_factorized_table
??create_factorized_table
??shinyLikert:::create_factorized_table
library(shinyLikert)
library(shinyLikert)
data2 = data
row.names( data2 )= NULL
data2
row.names( data2$likert_data )= NULL
data2$likert_data
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
x = c(13,17,16,27)
y = c(52,38,42,41)
x
y
x = c(13,17,16,27,17)
y = c(52,38,42,41,41)
x
y
?chisq.test
data$row_factors
data$column_factors
cbind( data$column_factors, "p")
cbind( data$column_factors, p=p)
cbind( data$column_factors, p=rep(0,10) )
cf = data$column_factors
cf$p = NULL
cf
cf[,p] = NULL
cf$p = 1
cf
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
dat = data.frame(x=1:2,y=3:4)
dat
data.frame( dat, p=NA)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
expression(paste("Sampled values, ", mu, "=5, ", sigma,
"=1")
)
expression(paste("Sampled values, ", mu, "=5, ", sigma,
"=1"))
expres = expression(paste("Sampled values, ", mu, "=5, ", sigma,
"=1"))
hist(rnorm(100),main=expres)
expression(beta)
Χ
Χ
X
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
library(shinyLikert)
?p.adjust
p.adjust(.1)
p.adjust(.1, "holm",10)
p.adjust(.1, "holm",9)
p.adjust(.1, "holm",4)
library(shinyLikert)

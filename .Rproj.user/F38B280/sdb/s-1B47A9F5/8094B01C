{
    "contents" : "---\ntitle: \"Examples\"\nauthor: \"Gregor de Cillia\"\ndate: \"January 18, 2016\"\noutput: \n  html_document: \n    highlight: textmate\n    theme: united\n    toc: yes\nruntime: shiny \n---\n\n# Import\n\nTo create a shiny widget the data is assumed to be of class `likertData`, which basically consists of three data frames.\n\n```{r, results='hide'}\n  library('knitr')\n  #library(shinyLikert)      # load the package from installed library\n  require( 'devtools' )\n  devtools::load_all( \"..\" ) # load the package from source\n  data( testData2 )\n  testData2 = createTestData( participants = 100, \n                              questions    = 10, \n                              input, \n                              output )\n\n```\n\nThe structure of the data is as follows\n\n```{r}\n  summary( testData2 )\n```\n\n* The first data frame `likert_data` consists of answers of 100 participants to 10 questions.\n* The second data frame allows it to classify the participants. In this case, the default method of `createTestData` gives \"country\" and \"gender\" as factors.\n* `question_factors` consists of factors, that let you classify the questions into groups. In this case, each question has been marked \"easy\" or \"hard\". Therefore, we get a factorial variable with 10 observations.\n\n# Simple usuage\n\n```{r}\n  fluidPage( \n    renderShinyLikert( \"abc\", testData2 )  \n  )\n```\n\n\nThe main function can be used like this\n\n```{r djfdfd,  eval=FALSE}\n  renderShinyLikert( \n        id, dataset , dropdown_factor )\n```\n\nIt takes a unique `id` as input. The dataset is assumed to be of class `likertData`. \n\n## In Shiny Markdown documents\n\nIt's output is a list contining the plot and the control element. They can be used like here\n\n```{r, eval = FALSE}\n  rendered2 = renderShinyLikert( \"ID 1\",\n        testData2,\n        dropdown = \"country\" )\n  rendered2$selector\n  rendered2$plot\n  dataTableOutput(\"ID 1.factorTable\")\n\n```\n\nwich produces the following output.\n\n```{r, echo=FALSE}\n  rendered2 = renderShinyLikert( \"ID 1\",\n        testData2 ,\n        dropdown = \"country\" )\n  rendered2$selector\n  rendered2$plot\n  dataTableOutput( \"ID 1.factorTable\" )\n```\n\nWe used the dataset `testData2` here. This data consists of three data frames.\n\n```{r}\n  names( testData2 )\n```\n\nThe first data frame `likert_data` consists of the likert items. The row names are the participant IDs and the column names are the questions of the of the survey.\n\n```{r}\n  kable( head( testData2$likert_data[,1:6] ) )\n```\n\nThe second data frame `row_factors` can be used to classify the participants.\n\n```{r}\n  kable( head( testData2$row_factors ) )\n```\n\nThe third data frame `column_factors` can be used to classify the questions.\n\n```{r}\n  kable( head( testData2$column_factors ) )\n```\n\nThe factors to be used in `dropdown` can be either row factors or column factors called by name. The dataset is filtered according to those factors prior to plotting. If you want to filter by question, just add another column to `testData2$column_factors`\n\n```{r}\n  testData2$column_factors = cbind( testData2$column_factors,\n                                    question = paste( \"Question\", \n                                                      1:10 )\n  )\n\n  rendered2.1 = renderShinyLikert( \"ID 1.1\",\n                                   testData2,\n                                   dropdown = c(\"difficulty\",\n                                                \"question\") )\n  rendered2.1$selector\n  rendered2.1$plot\n  \n```\n\n\n\n## Ui/Server setup\n\nTo use this function in a ui/server setup, you can use the following syntax\n\n```{r}\n\nshinyApp(\n    ui= fluidPage(\n        uiOutput(\"selector\"),\n        uiOutput( \"plot\" )\n      ),\n    server = function(input,output,session){\n      rendered = renderShinyLikert( \n        \"ID 2\", testData2 , input, output, \n        dropdown = \"gender\" )\n      output$plot = rendered$plot\n      output$selector = rendered$selector\n    }\n  )\n  \n```\n\n# Input options\n\n## Several dropdown inputs\n\n`output$selector` is the inputpanel which lets you select the gender in this case. To add more inputs, from them together in a list.\n\n```{r}\n    rendered3 = renderShinyLikert( \"ID 3\",\n        testData2,\n        dropdown = c( \"country\", \"difficulty\" )\n    )\n  rendered3$selector\n  rendered3$plot\n```\n\nYou can also use `column_factors` exactly as above.\n\n```{r}\n  fluidPage(\n    renderShinyLikert( \"ID 4\",\n        testData2,\n        dropdown = c( \"difficulty\" )\n    )\n  )\n```\n\n## Height\n\n\nTo control the height of the plot, use the option `height = c( height_min, height_max )`\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID 5\",\n        testData2, \n        dropdown = c( \"gender\", \"country\" ),\n        height = c( 300, 600 )\n      ) \n    )\n```\n\nYou can also copy the plot above, like so\n\n\n```{r}\n  plotOutput( \"ID 5.plot\" )\n```\n\n## Responselevels\n\nTo get a custom order for the responses, use the responselevels parameter\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID 6\",\n        testData2,\n        dropdown = \"gender\",\n        response_levels = c( \"Strongly agree\", \"Agree\", \"Neutral\" )\n      ) \n    )\n```\n\n## Pass arguments to `HH::likert`\n\nYou can also pass arguments down to `HH::likert`\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID 7\",\n        testData2,\n        dropdown = \"country\",\n        main = \"custom_title\",\n        horizontal = FALSE,\n        as.percent = TRUE,\n        positive.order = TRUE\n      ) \n    )\n```\n\nYou can also use the names of `column_factors` for the dropdown argument.\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID faf\",\n        testData2,\n        dropdown = \"difficulty\"      ) \n    )\n```\n\n## split_factors\n\nFor factror analysis, you can also use the `split_factors` argument.\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID 7.5\",\n        testData2,\n        split    = c( \"difficulty\", \"gender\", \"country\" ),\n        positive.order = TRUE   # ???\n      ) \n    )\n```\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID 8\",\n        testData2 ,  \n        dropdown = \"country\",\n        split    = \"difficulty\"\n      ) \n    )\n```\n\n```{r, eval = FALSE }\n    fluidPage( \n      renderShinyLikert( \"ID 9\",\n        testData2 ,  \n        dropdown = \"question\",\n        split    = \"country\"\n      ) \n    )\n```\n\n# Grouping data with the likert package\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID 10\",\n        testData2,\n        height  = c(500,800),\n        dropdown = c(\"gender\",\"difficulty\"),\n        group = \"country\"\n      ) \n    )\n```\n\n```{r}\n    fluidPage( \n      renderShinyLikert( \"ID 11\",\n        testData2,\n        height  = c(500,800),\n        dropdown = c(\"country\",\"difficulty\"),\n        group = \"gender\",\n        grouping = \"HH\"\n      ) \n    )\n```\n\n",
    "created" : 1453106380468.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1970583286",
    "id" : "8094B01C",
    "lastKnownWriteTime" : 1453697357,
    "path" : "C:/Users/grogon/workspace/shinyLikert/examples/Examples.Rmd",
    "project_path" : "examples/Examples.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_markdown"
}
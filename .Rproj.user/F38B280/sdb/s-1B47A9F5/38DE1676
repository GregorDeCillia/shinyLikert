{
    "contents" : "#' Shiny likert\n#'\n#' Creates a list of rendered shiny outputs to be used inside a call to\n#' shinyApp() or inside an ShinyMarkdown document\n#'\n#' @usage\n#' renderShinyLikert( id, data,\n#'                    input, output,\n#'                    dropdown_factors = NULL,\n#'                    questions = names( data$likert_data ),\n#'                    height = NULL,\n#'                    env = parent.frame(),\n#'                    quoted = FALSE,\n#'                    expr= \"NULL\",\n#'                    response_levels = levels( data$likert_data[,1] ),\n#'                    split_factors = NULL,\n#'                    ...\n#'                  )\n#'\n#' @param id A string definig the id of the output. The id has to be\n#' unique within your project\n#' @param data An object of type likertData to be plotted\n#' @param input,output options to be passed down from the following call \\cr\n#' shinyApp( ui=..., server = function( input,output, session )\\{ ... \\} )\n#' @param dropdown_factors names ot the factors which should be used as for\n#' the dropdown menus\n#' @param questions the questions that should be displayed. (Currently broken)\n#' @param height minimum and maximum height of the plot in px. Setting this option\n#' will create a slider to control the height of the plot.\n#' @param env argument to be used by the shiny runtime\n#' @param quoted argument to be used by the shiny runtime\n#' @param expr argument to be used by the shiny runtime\n#' @param response_levels answer possibilities of interest\n#' @param split_factors factors to be used in the HH plot\n#' @param ... further arguments to be passed down to HH::likert\n#' @return  A list of rendered shiny objects which can be used as outputs.\n#' @examples\n#' x <- 1\n#' # shinyApp(\n#' #     ui= fluidPage(\n#' #         uiOutput( \"selector\" ),\n#' #         plotOutput( \"plot\" )\n#' #     ),\n#' #     server = function( input, output, session ){\n#' #         rendered = renderShinyLikert(\n#' #             \"ID 1\", testData2 ,\n#' #             input, output,\n#' #             dropdown = \"gender\" )\n#' #         output$plot     = rendered$plot\n#' #         output$selector = rendered$selector\n#' #     }\n#' # )\n#' @export\n#' @author Gregor de Cillia\nrenderShinyLikert = function( id,\n                              data,\n                              input = data$input,\n                              output = data$output,\n                              dropdown_factors = NULL,\n                              questions = names( data$likert_data ),\n                              height = NULL,\n                              env = parent.frame(),\n                              quoted = FALSE,\n                              expr= \"NULL\",\n                              response_levels = levels( data$likert_data[,1] ),\n                              split_factors = NULL,\n                              group = NULL,\n                              grouping = \"likert\",\n                              ... ){\n  valid_factors = c( names(data$row_factors), names(data$\"column_factors\") )\n\n  for ( factor in c( dropdown_factors, split_factors ) )\n    if( !( factor %in% valid_factors ) )\n      stop( paste( \"factor\", factor, \"invalid\" ) )\n\n  dataset        = data$likert_data#[ , questions ]\n  row_factors    = data$row_factors\n  column_factors = data$column_factors#[questions,]\n\n  currentFactors = function(){\n    out = NULL\n    for ( factor in dropdown_factors ){\n      if( is.null( input[[ paste0( id, factor ) ]] ) )\n        return( NULL )\n      out = c( out, input[[ paste0( id, factor ) ]] )\n    }\n    if ( is.null(out) )  ## bypass error messages by replacing NA with FALSE\n      return ( NULL )\n    return( out )\n  }\n\n  selector2 = reactive({\n    out = create_dropdown_selector( id, dropdown_factors,\n                              row_factors, column_factors,\n                              currentFactors()#,\n                              #input, output\n    )\n    out$heightSlider = renderHeightSlider( id, height )\n    return( out )\n  })\n\n  # create ouputs\n  outs = renderShinyPlot( data,\n                          input,\n                          dropdown_factors,\n                          currentFactors,\n                          questions,\n                          height,\n                          id,\n                          response_levels,\n                          split_factors,\n                          group,\n                          grouping,\n                          output,\n                          ... )\n\n  plot = outs$plot\n  cat( \"TABLE SIZE\\n\"  )\n  #cat( dim( outs$table ), \"\\n\\n\\n\" )\n  #output[[ paste0(id, \".factorTable\" ) ]] = outs$table\n  cat( paste0(id, \".factorTable\" ) )\n  table = outs$table\n\n  output[[paste0(id,\".plot\")]] = plot\n\n  selector3 = reactive({\n    selector21 = selector2()\n  if ( length( selector21 ) == 0 )\n    return( NULL )\n  if ( length( selector21 ) == 1 )\n    return( selector3 = inputPanel(  selector21[[1]] ) )\n  if( length( selector21 ) == 2 )\n    return( inputPanel(  selector21[[1]], selector21[[2]] ) )\n  if( length( selector21 ) == 3 )\n    return( inputPanel(  selector21[[1]],\n                             selector21[[2]],\n                             selector21[[3]] )\n    )\n  if( length( selector21 ) == 4 )\n    return( inputPanel(  selector21[[1]],\n                             selector21[[2]],\n                             selector21[[3]],\n                             selector21[[4]] ) )\n  })\n\n  #selector4 = selector2\n  #names( selector4 ) = NULL\n  #selector3 = do.call( \"inputPanel\", c( selector2, cellArgs = list() ) )\n\n\n  list(\n        selector = renderUI( selector3() ),\n        plot = renderUI({ tabsetPanel(\n          tabPanel( \"plot\",\n                    plot\n          ),\n          tabPanel( \"table\",\n                    table\n          )\n        ) })\n  )\n\n}\n",
    "created" : 1453179499400.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2446596108",
    "id" : "38DE1676",
    "lastKnownWriteTime" : 1453534990,
    "path" : "C:/Users/grogon/workspace/shinyLikert/R/renderShinyLikert.R",
    "project_path" : "R/renderShinyLikert.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}
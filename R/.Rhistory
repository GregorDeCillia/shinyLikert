View(data)
rep(c("Male", "Female"), 100, rep=T)
sample(c("Male", "Female"), 100, rep=T)
data = cbind( data, gender = sample(c("Male", "Female"), 100, rep=T))
View(data)
data = data.frame( Q1 = sample(
c("Strongly agree", "Agree", "Neutral",
"Disagree", "Strongly disagree"),
100, replace=TRUE) )
for ( i in 1:10 )
data = cbind( data, sample(
c("Strongly agree", "Agree", "Neutral",
"Disagree", "Strongly disagree"),100, replace=TRUE)
)
names(data) = paste("Question", 1:11)
data = cbind( data, gender = sample(c("Male", "Female"), 100, rep=T))
View(data)
nquestions = 10
data = data.frame( Q1 = sample(
c("Strongly agree", "Agree", "Neutral",
"Disagree", "Strongly disagree"),
100, replace=TRUE) )
for ( i in 1:(nquestions-1) )
data = cbind( data, sample(
c("Strongly agree", "Agree", "Neutral",
"Disagree", "Strongly disagree"),100, replace=TRUE)
)
names(data) = paste("Question", 1:nquestions)
data = cbind( data, gender = sample(c("Male", "Female"), 100, rep=T))
View(data)
nquestions = 10
nparticipants = 100
data = data.frame( Q1 = sample(
c("Strongly agree", "Agree", "Neutral",
nparticipants, replace=TRUE) )
"Disagree", "Strongly disagree"),
for ( i in 1:(nquestions-1) )
data = cbind( data, sample(
c("Strongly agree", "Agree", "Neutral",
nquestions = 10
nparticipants = 100
data = data.frame( Q1 = sample(
nquestions = 10
nparticipants = 100
nquestions = 10
nparticipants = 100
data = data.frame( Q1 = sample(
c("Strongly agree", "Agree", "Neutral",
"Disagree", "Strongly disagree"),
nparticipants, replace=TRUE) )
for ( i in 1:(nquestions-1) )
data = cbind( data, sample(
c("Strongly agree", "Agree", "Neutral",
"Disagree", "Strongly disagree"),nparticipants, replace=TRUE)
)
names(data) = paste("Question", 1:nquestions)
data = cbind( data, gender = sample(c("Male", "Female"), nparticipants, rep=T) )
data = cbind( data, country = sample(c("Austria", "Germany", "Switzerland"), nparticipants, rep=T) )
View(data)
likert(data)
likert(data, Q1 ~ .)
ProfChal
likert(Question ~ . , ProfChal[ProfChal$Subtable=="Employment sector",],
main='Is your job professionally challenging?',
ylab=NULL,
sub="This plot looks better in a 9in x 4in window.")
data(ProfChal)
likert(Question ~ . , ProfChal,
main='Is your job professionally challenging?',
ylab=NULL,
sub="This plot looks better in a 9in x 4in window.")
ProfChal
likert(Question ~ . , ProfChal|Subtable,
main='Is your job professionally challenging?',
ylab=NULL,
sub="This plot looks better in a 9in x 4in window.")
likert(Question ~ Subtable , ProfChal,
main='Is your job professionally challenging?',
ylab=NULL,
sub="This plot looks better in a 9in x 4in window.")
likert(Question ~ . , ProfChal,
main='Is your job professionally challenging?',
ylab=NULL,
sub="This plot looks better in a 9in x 4in window.")
data[,1]
summary(data[,1])
as.numeric(summary(data[,1]))
for ( i in 2:1 )
cat(i)
for ( i in 1:2 )
cat(i)
rbind(NULL,summary(data[,1]))
rbind(NULL,as.numeric(summary(data[,1])))
create_table = function( dataset ){
out = null
for ( i in 1:1:nquestions )
rbind( out, summary( data[,i] ) )
return ( out )
}
create_table(data)
create_table = function( dataset ){
out = NULL
for ( i in 1:1:nquestions )
return ( out )
rbind( out, summary( data[,i] ) )
}
create_table = function( dataset ){
)))
create_table(data)
create_table = function( dataset ){
out = NULL
for ( i in 1:1:nquestions )
rbind( out, summary( dataset[,i] ) )
return ( out )
}
create_table(data)
summary(data[,1])
create_table = function( dataset ){
out = NULL
for ( i in 1:1:10 )
rbind( out, as.numeric(summary( dataset[,i] ) ) )
return ( out )
}
create_table = function( dataset ){
out = NULL
for ( i in 1:10 )
rbind( out, as.numeric(summary( dataset[,i] ) ) )
return ( out )
}
create_table( dataset )
create_table( data )
out =  NULL
out
rbind( out, as.numeric(summary( dataset[,1] ) ) )
rbind( out, as.numeric(summary( data[,1] ) ) )
rbind( out, as.numeric(summary( data[,2] ) ) )
create_table = function( dataset ){
out = NULL
for ( i in 1:10 )
out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
return ( out )
}
create_table(data)
out = create_table(data)
names(out)
create_table = function( dataset ){
out = NULL
for ( i in 1:10 )
out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
names( out ) = levels( dataset[,1])
return ( out )
}
create_table( data )
out
names(out)
names(out) = c("1","2","3","4","5")
out
colnames(out) = c("1","2","3","4","5")
out
create_table = function( dataset ){
out = NULL
for ( i in 1:10 )
out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = levels( dataset[,1])
return ( out )
}
create_tabl
create_table(data)
rownames(out) = colnames(dataset)[1:10]
rownames(out) = colnames(data)[1:10]
out
create_table = function( dataset ){
out = NULL
for ( i in 1:10 )
out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = levels( dataset[,1])
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(data)
out = create_table(data)
likert(out)
data
NA
levels(data[,1])
levels(data[,2])
levels(data[,3])
?sliderInput
createUi = function(){
selectInput( "correlation_question", label = "question to plot",
choices = c("a","b"),
selected = "a" )
}
createUI
createUi
createUi()
?likert
x~ y
a= x~ y
a
str(a)
?formula
terms(a)
dataset[,1]
data[,1]
data[,1]=="Agree"
levels(data[,1])
levels(data[,1])[c(4,2,3,1,5)]
responselevels = levels(data[,1])[c(4,2,3,1,5)]
responselevels
length(responselevels)
rep(NA,length(responselevels))
tmp = rep( NA, length(responselevels) )
tmp[0]
create_table = function( dataset, responselevels = NA ){
if ( is.na(responselevels ) )
responselevels = levels( dataset[,1])
out = NULL
for ( i in 1:10 )
tmp = rep( NA, length(responselevels) )
for ( j in length(responselevels) )
tmp[j] = data[,i]==responselevels[j]
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = levels( dataset[,1])   # responselevel
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(data)
create_table = function( dataset, responselevels = NA ){
if ( is.na(responselevels ) )
responselevels = levels( dataset[,1])
out = NULL
for ( i in 1:10 )
tmp = rep( NA, length(responselevels) )
for ( j in length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = levels( dataset[,1])   # responselevel
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(data)
create_table = function( dataset, responselevels = NA ){
if ( is.na(responselevels ) )
responselevels = levels( dataset[,1])
out = NULL
for ( i in 1:10 ){
tmp = rep( NA, length(responselevels) )
for ( j in length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = levels( dataset[,1])   # responselevel
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(data)
create_table = function( dataset, responselevels = NA ){
if ( is.na(responselevels ) )
responselevels = levels( dataset[,1])
out = NULL
for ( i in 1:10 ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = levels( dataset[,1])   # responselevel
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(data)
create_table = function( dataset, responselevels = NA ){
if ( is.na(responselevels ) )
responselevels = levels( dataset[,1])
out = NULL
for ( i in 1:10 ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = responselevel  # responselevel
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(dat)
create_table(data)
create_table = function( dataset, responselevels = NA ){
if ( is.na(responselevels ) )
responselevels = levels( dataset[,1])
out = NULL
for ( i in 1:10 ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = responselevels  # responselevel
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(data)
create_table(data, responselevels)
is.na(responselevels)
is.na(responselevels)[1]
create_table = function( dataset, responselevels = NA ){
if ( is.na(responselevels )[1] )
responselevels = levels( dataset[,1])
out = NULL
for ( i in 1:10 ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = responselevels  # responselevel
rownames(out) = colnames(dataset)[1:10]
return ( out )
}
create_table(data, responselevels)
create_table(data)
?sliderInpu
?sliderInput
?likert
hist(rnorm(100),main=1)
hist(rnorm(100),main=2)
likert(out)
likert(out, main=1)
likert(out, main=2)
likert(out, main=string(2))
likert(out, main=tostring(2))
likert(out, main=toString(2))
?renderPlot
setwd("C:/Users/grogon/workspace")
survey3 <- read.csv( "results_EXP2.csv",
na.strings = "",
check.names = FALSE )
create_table = function( dataset, responselevels = NA,
questions = 1:10 ){
if ( is.na(responselevels )[1] )
responselevels = levels( dataset[,questions[1]])
out = NULL
for ( i in 1:10 ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
#out = rbind( out, as.numeric(summary( dataset[,i] ) ) )
colnames( out ) = responselevels  # responselevel
rownames(out) = colnames(dataset)[1:10]
return (
fluidPage(
plot.height.input( "main" ),
renderPlot( likert( out, main = "Overview" ),
height = function(){ input$plot.height.main } )
)
)
plot( likert(out) )
}
create_table(data)
?ncolumns
dim(data)
?dim
create_table2 = function( dataset, responselevels = NA ){
if ( is.na(responselevels)[1] )
responselevels =  levels( dataset[, 1 ] )   # fixme: what if levels are missing?
out = NULL
for ( i in 1:dim(dataset)[1] ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
colnames(out) = responselevels
rownames(out) = colnames(dataset)
}
createtable2(data)
create_table2(data)
create_table2(data[,1:10])
create_table2 = function( dataset, responselevels = NA ){
if ( is.na(responselevels)[1] )
responselevels =  levels( dataset[, 1 ] )   # fixme: what if levels are missing?
out = NULL
for ( i in 1:dim(dataset)[2] ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
colnames(out) = responselevels
rownames(out) = colnames(dataset)
}
create_table2(data)
create_table2 = function( dataset, responselevels = NA ){
if ( is.na(responselevels)[1] )
responselevels =  levels( dataset[, 1 ] )   # fixme: what if levels are missing?
out = NULL
for ( i in 1:dim(dataset)[2] ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( data[,i]==responselevels[j] )
out = rbind( out, tmp )
}
colnames(out) = responselevels
rownames(out) = colnames(dataset)
return(out)
}
create_table2(data)
data
create_table2(data)
create_table2(data[,1:10])
create_table2(data[,1:10],responselevels)
responselevels
responselevels = c("Strongly disagree","Disagree","Neutral","Agree","Strongly agree")
create_table2(data[,1:10],responselevels)
create_table2(data,responselevels)
x=z
data[,11]
names(data[,11])
names(data)
?textOutput
dataset[dataset[,11]=="Male",
questions]
data[data[,11]=="Male",
questions]
data[data[,11]=="Male",
1:10]
data[,11]=="Male"
data[data[,11]=="Male",
1:10]
data[data[,11]=="Female",
1:10]
data[data[,11]=="Femal",
1:10]
data[data[,11]=="Female",
1:10]
data[,
1:10]
data[data[,11]=="Female",
1:10]
data[data[,11]=="Male",
1:10]
data[,11]=="Male"
sum(data[,11]=="Male")
data2 = data[data[,11]=="Male",
1:10]
dims(data2)
dim(data2)
data2
View(data2)
View(data)
likert( create_table2( dataset[dataset[,1]=="Male",
questions], responselevels  ) )
likert( create_table2( data[data[,11]=="Male",
questions], responselevels  ) )
likert( create_table2( data[data[,11]=="Male",
1:10], responselevels  ) )
likert( create_table2( data[data[,11]=="Female",
1:10], responselevels  ) )
likert( create_table2( ,
1:10], responselevels  ) )
likert( create_table2( data[,
1:10], responselevels  ) )
data[,11]=="Male"
create_table2 = function( dataset, responselevels = NA ){
if ( is.na(responselevels)[1] )
responselevels =  levels( dataset[, 1 ] )   # fixme: what if levels are missing?
out = NULL
for ( i in 1:dim(dataset)[2] ){
tmp = rep( NA, length(responselevels) )
for ( j in 1:length(responselevels) )
tmp[j] = sum( dataset[,i]==responselevels[j] )
out = rbind( out, tmp )
}
colnames(out) = responselevels
rownames(out) = colnames(dataset)
return(out)
}
likert( create_table2( data[,
1:10], responselevels  ) )
likert( create_table2( data[data[,11]=="Female",
1:10], responselevels  ) )
likert( create_table2( data[data[,11]=="Male",
1:10], responselevels  ) )
dataset[,12]
data[,12]
data[,12]=="Austria"
?inputPanel
?sliderInput
require(shiny)
?sioutput
?iioutput
?uiOutput
install.packages("leaflet")
require(leaflet)
?leaflet
library(leaflet)
m = leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
?tsp
tsp(1:2938932)
setwd("~/shinyLikert/R")
ls
ls()
Sys.getenv("R_USER")
